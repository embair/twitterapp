import 'whatwg-fetch';
import React, { Component } from 'react';
import { PageHeader, Modal, Table, Panel, Glyphicon, Form } from 'react-bootstrap';
import assert from 'assert';
import moment from 'moment';
import Immutable from 'immutable';
import SearchBox from './SearchBox.js';
import filters from './filters.js';
import FilterEditor from './FilterEditor.js';
import Stats from './Stats.js';

class App extends Component {
    constructor() {
        super();
        this.state = {
            // read-only model (list of tweets)
            tweets : Immutable.List(),
            // whether the client is currently waiting for results to be fetched from server
            fetching : true,
            // key used for table ordering
            orderBy : 'id',
            // wheter the table is sorted in ascending (true) or descending (false) order 
            ascending : true,
            // active filter values (mapped by index of filter)
            filterValues : Immutable.Map(),
            // whether the statistics modal window is currently displayed
            showStats : false
        }
        // listing of available filters
        this.filters = [
            filters.date,
            filters.fullText,
            filters.tweetLength,
            filters.mentions,
            filters.hashtags,
            filters.favourites,
            filters.hashtag,
            filters.mention
        ];
        //Temporary
        this.fetchTweets('reactjs');
    }

    fetchTweets(user) {
        //TODO url encode
        //if (this.isMounted) this.setState({fetching:true});
        fetch("/tweets?u="+user).then((response) => {
            //TODO error handling
            this.setState({fetching:false});
            return response.text();
        }).then((body)=> {
            console.log(JSON.parse(body));
            this.loadTweets(Array.from(JSON.parse(body)));
        });
    }

    // show statistics modal
    showStats() {
        this.setState({showStats : true});
    }

    // hide statistics modal
    hideStats() {
        this.setState({showStats : false});
    }

    // load tweets from the timeline object generated by Twitter API
    loadTweets(timeline) {
        var transformed = timeline.map((tweet,i) => {
            return {
                id: i,
                text: tweet.text,
                favs: Number.parseInt(tweet.favorite_count, 10),
                retweets: Number.parseInt(tweet.retweet_count, 10),
                date: moment(tweet.created_at),
                mentions: tweet.entities.user_mentions.map(m => m.screen_name),
                hashtags: tweet.entities.hashtags.map(h => h.text)
            }
        });

        this.setState({tweets: Immutable.List(transformed)});
    }

    // toggle table ordering by the specified field
    toggleSort(field) {
        assert.equal(typeof field,"string");
        if (this.state.orderBy === field) {
            this.setState({ ascending : !this.state.ascending });
        } else {
            this.setState({ orderBy : field, ascending: true });
        }
    }

    render() {

        // apply filters and sorting to the tweet list
        var displayList = this.state.tweets
            // apply filters
            .filter((item) => {
                // ok only if all filters match
                return this.filters.every((filter, i) => {
                    if (!filter.apply(item, this.state.filterValues.get(i))) {
                        console.log("failed filter", filter.label);
                        return false;
                    }
                    return true;
                });
            })
            // apply sorting
            .sort((a,b) => {
                const va = a[this.state.orderBy];
                const vb = b[this.state.orderBy];
                if (va === vb) return 0;
                if (va > vb) return 1 * (this.state.ascending?1:-1);
                return -1 * (this.state.ascending?1:-1);
        })


        return (
            <div className="container">
                <PageHeader>Twitter browser</PageHeader>
                <SearchBox onClick={this.fetchTweets.bind(this)}/>
                <Panel
                    header="Filters"
                    collapsible
                    defaultExpanded
                >
                    <Form horizontal>
                    {this.filters.map((filter, key) => { return (
                        <FilterEditor key={key}
                            label={filter.label}
                            value={this.state.filterValues.get(key)}
                            onChange={(value) => {
                                this.setState({filterValues : this.state.filterValues.set(key, value)});
                            }}
                        />
                    )})}
                    </Form>
                </Panel>
                <a href="#" onClick={this.showStats.bind(this)}>Show statistics</a>
                <Table striped bordered condensed hover>
                    <thead>
                        <tr>
                            <th onClick={this.toggleSort.bind(this,'id')}>#</th>
                            <th onClick={this.toggleSort.bind(this,'text')}>text</th>
                            <th onClick={this.toggleSort.bind(this,'favs')}><Glyphicon glyph="star"/></th>
                            <th onClick={this.toggleSort.bind(this,'date')}>sent at</th>
                        </tr>
                    </thead>
                    <tbody>
                         {displayList.map((tweet, i)=> {
                            return (
                                <tr key={tweet.id}>
                                    <td>{tweet.id}</td>
                                    <td>{tweet.text}</td>
                                    <td>{tweet.favs}</td>
                                    <td>{tweet.date.format('lll')}</td>
                                </tr>
                            )                            
                         })}
                    </tbody>
                </Table>
                <Modal show={this.state.showStats} onHide={this.hideStats.bind(this)}>
                    <Modal.Header closeButton>
                        <Modal.Title>Statistics</Modal.Title>
                    </Modal.Header>
                    <Modal.Body>
                        <Stats tweets={this.state.tweets}/>
                    </Modal.Body>
                </Modal>
            </div>
        );
    }
}

export default App;
